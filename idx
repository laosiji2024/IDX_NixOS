# To learn more about how to use Nix to configure your environment
# see: https://firebase.google.com/docs/studio/customize-workspace
{ pkgs, ... }: {
  # Which nixpkgs channel to use.
  channel = "stable-24.05"; # or "unstable"
  # Use https://search.nixos.org/packages to find packages
  packages = [
    # pkgs.go
    # pkgs.python311
    # pkgs.python311Packages.pip
    # pkgs.nodejs_20
    # pkgs.nodePackages.nodemon
    pkgs.htop
    pkgs.cloudflared
    pkgs.sing-box
  ];
  # Sets environment variables in the workspace
  env = {
    nix = "y";
    ARGO_TOKEN = "eyJhIjoiZGQyNzBjM2IyNjc1YjZhZDc5MDQzOWVkY2Y4OWVhYjciLCJ0IjoiOTU2YWZjMWQtODU0Ni00YTc5LThmN2ItNGQzOTNkMTI5YjM4IiwicyI6IlpXRmxNREppTldVdE16RTJOaTAwWlRZeUxUazNNRGN0T0dObE5qY3haRFUwWldFeSJ9";
  };

  services = {
    docker.enable = true;
  };

  idx = {
    # Search for the extensions you want on https://open-vsx.org/ and use "publisher.id"
    extensions = [
      # "vscodevim.vim"
    ];
    # Enable previews
    previews = {
      enable = true;
      previews = {
        # web = {
        #   # Example: run "npm run dev" with PORT set to IDX's defined port for previews,
        #   # and show it in IDX's web preview panel
        #   command = ["npm" "run" "dev"];
        #   manager = "web";
        #   env = {
        #     # Environment variables to set for your server
        #     PORT = "$PORT";
        #   };
        # };
      };
    };
    # Workspace lifecycle hooks
    workspace = {
      # Runs when a workspace is first created
      onCreate = {
        # Example: install JS dependencies from NPM
        # npm-install = "npm install";
        # Open editors for the following files by default, if they exist:
        default.openFiles = [ ".idx/dev.nix" "README.md" ];
      };
      # Runs when the workspace is (re)started
      onStart = {
        # Example: start a background task to watch and re-build backend code
        # watch-backend = "npm run watch-backend";
        init-docker = " cat > docker-compose.yml <<'EOF'
services:
  ubuntu:
    image: ubuntu:lastet
    container_name: ubuntu
    hostname: ubuntu
    network:
      - idx
    volumes:
      - ubuntu_data:/data
    tty: true
    restart: unless_stopped
    command: |
      bash -c \"
        export DEBIAN_FRONTEND=noninteractive &&
        apt update && apt install -y openssh-server &&
        echo \"root:hello\" | chpasswd &&
        sed -i 's/#*PermitRootLogin.*/PermitRootLogin yes/' /etc/ssh/sshd_config &&
        sed -i 's/#*PasswordAuthentication.*/PasswordAuthentication yes/' /etc/ssh/sshd_config &&
        mkdir -p /var/run/sshd &&
        service ssh start &&
        tail -f /dev/null
      \"
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    command: tunnel --edge-ip-version auto run --token $ARGO_TOKEN
    networks:
      - idx
    volumes:
      - cloudflared_data:/etc/cloudflared
    restart: unless-stopped

  networks:
    idx:
      driver: bridge
  volumes:
    ubuntu_data:
    cloudflared_data:
EOF";
        start-compose = "docker compose up -d";
      };
    };
  };
}
